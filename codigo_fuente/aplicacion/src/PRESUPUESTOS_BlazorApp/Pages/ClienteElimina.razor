@page "/cliente_actualiza_condicion/{Cli_Id}"
@using Newtonsoft.Json
@using MudBlazor
@using Model.DTO.v1
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@inject ILocalStorageService localStorage

<PageTitle>Actualizar Condición Cliente</PageTitle>

<section style="max-width:600px; margin: 0 auto;">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-5" Elevation="3">
                @if (cliente != null)
                {
                    @if (cliente.Cli_Estado == "True")
                    {
                        <MudItem Class="d-flex justify-center align-center" xs="12">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" Disabled="@_processing" EndIcon="@Icons.Material.Filled.Delete" OnClick="@(async () => await EliminarEstadoCliente())" Style="margin-right: 10px;">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" Color="Color.Inherit" />
                                    <MudText Class="ms-2">Actualizando...</MudText>
                                }
                                else
                                {
                                    <MudText>Eliminar</MudText>
                                }
                            </MudButton>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowCircleLeft" Color="Color.Primary" Size="Size.Small" OnClick="Btn_Paginado_Cliente_Click">
                                VOLVER
                            </MudButton>
                        </MudItem>
                    }
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</section>

@code {
    [Parameter] public string Cli_Id { get; set; }
    private DTO_Cliente_Obten_x_Id cliente;
    private bool _processing = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCliente();
    }

    private async Task LoadCliente()
    {
        try
        {
            var client = ClientFactory.CreateClient("ApiPRESUPUESTOS");
            var token = await localStorage.GetItemAsync<string>("authToken");
            if (token != null)
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            var response = await client.GetAsync($"api/v1/Cliente/Obten_x_Id/{Cli_Id}");
            if (response.IsSuccessStatusCode)
            {
                var responseBody = await response.Content.ReadFromJsonAsync<DTO_Response<DTO_Cliente_Obten_x_Id>>();
                if (responseBody != null && responseBody.Data != null)
                {
                    cliente = responseBody.Data;
                }
                else
                {
                    errorMessage = "Cliente no encontrado.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocurrió un error: {ex.Message}";
        }
    }

    private async Task EliminarEstadoCliente()
    {
        if (cliente == null) return;

        _processing = true;
        StateHasChanged(); // Actualiza el UI para mostrar el estado de procesamiento

        try
        {
            // Actualiza el estado del cliente a 'False'
            cliente.Cli_Estado = "False";

            var client = ClientFactory.CreateClient("ApiPRESUPUESTOS");
            var token = await localStorage.GetItemAsync<string>("authToken");
            if (token != null)
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            var content = new StringContent(JsonConvert.SerializeObject(cliente), System.Text.Encoding.UTF8, "application/json");
            var response = await client.PutAsync($"api/v1/Cliente/Actualiza_Condicion/{Cli_Id}", content);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/clientes_paginado");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocurrió un error: {ex.Message}";
        }
        finally
        {
            _processing = false;
            StateHasChanged(); // Actualiza el UI para ocultar el estado de procesamiento
        }
    }
    private void Btn_Paginado_Cliente_Click()
    {
        NavigationManager.NavigateTo("/clientes_paginado");
    }
}
