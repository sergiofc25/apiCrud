@page "/login"
@using System.Net.Http.Json
@using Model.DTO.v1
@using MudBlazor
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@layout LoginLayout

<PageTitle>Login</PageTitle>

<section style="max-width:600px; margin: 0 auto;">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-5" Elevation="3">
                <MudItem Class="d-flex flex-column justify-center align-center mud-width-full gap-5 mb-5" xs="12">
                    <MudText Align="Align.Center" Typo="Typo.h6" Color="Color.Inherit">
                        Sistema Integrado de Analisis de Precios Unitarios
                    </MudText>
                </MudItem>
                <MudForm @ref="form" OnValidSubmit="HandleLogin">
                    <MudTextField @bind-Value="loginModel.Usu_Correo" Label="Correo Electrónico" Variant="Variant.Outlined"
                                  Margin="Margin.Dense" Required="true" Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Email" />
                    <MudTextField @bind-Value="loginModel.Usu_Clave" Label="Contraseña" Variant="Variant.Outlined"
                                  Margin="Margin.Dense" Required="true" InputType="InputType.Password"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Lock" />
                    <MudItem Class="d-flex justify-center align-center" xs="12">
                        <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                   EndIcon="@Icons.Material.Filled.Send" Disabled="isProcessing"
                                   OnClick="async () => await HandleLogin()">
                            @if (isProcessing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" Color="Color.Inherit" />
                                <MudText Class="ms-2">Ingresando...</MudText>
                            }
                            else
                            {
                                <MudText>Iniciar Sesión</MudText>
                            }
                        </MudButton>
                    </MudItem>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
                    }
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</section>

@code {
    private DTO_Usuario_Obten_Login loginModel = new DTO_Usuario_Obten_Login();
    private string errorMessage = string.Empty;
    private bool isProcessing = false;
    private MudForm? form;

    private async Task HandleLogin()
    {
        if (form.IsValid)
        {
            isProcessing = true;
            StateHasChanged();  // Actualiza el UI para mostrar el estado de procesamiento
            try
            {
                var client = ClientFactory.CreateClient("ApiPRESUPUESTOS");
                var response = await client.PostAsJsonAsync("api/v1/Accounts/Login", loginModel);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<DTO_AuthResponse>();

                    if (result != null && result.IsAuthSuccessful)
                    {
                        // Almacenar el token en el almacenamiento local
                        localStorage.SetItemAsync("authToken", result.Token);
                        NavigationManager.NavigateTo("/index");
                    }
                    else
                    {
                        errorMessage = result?.ErrorMessage ?? "Error desconocido";
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Error en la solicitud de autenticación: {response.StatusCode} - {response.ReasonPhrase}. Detalles: {errorContent}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Ocurrió un error: {ex.Message}";
            }
            finally
            {
                isProcessing = false;
                StateHasChanged();  // Actualiza el UI para ocultar el estado de procesamiento
            }
        }
    } 

}