@page "/clientes_paginado"
@using System.Net.Http.Json
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@using Model.DTO.v1
@using MudBlazor
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@inject ILocalStorageService localStorage
@inject IModalService model

<PageTitle>Clientes Paginados</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-5" Elevation="3">
            <MudItem Class="d-flex align-center justify-center mud-width-full" xs="12">
                <MudItem Class="d-flex align-center justify-start mud-width-full" xs="6">
                    <MudText Typo="Typo.h6" Color="Color.Primary">Clientes</MudText>
                </MudItem>

                <MudItem Class="d-flex align-center justify-end mud-width-full" xs="6">
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddBox" Color="Color.Primary"
                               Size="Size.Small" OnClick="Btn_Nuevo_Cliente_Click">NUEVO</MudButton>
                </MudItem>
            </MudItem>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-5" Elevation="3">
            <MudTable Items="@clientes" RowsPerPage="@registroPagina" FixedHeader="true" Dense="true"
                      Hover="true" Striped="true" Breakpoint="Breakpoint.Sm" Loading="@cargando"
                      LoadingProgressColor="Color.Primary" Height="466px" Elevation="3">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Listado de Clientes</MudText>
                </ToolBarContent>
                <ToolBarContent>
                    <MudItem Class="d-flex align-center justify-center mud-width-full pb-5" xs="12">
                        <MudTextField T="string" Value="@searchTerm" ValueChanged="@(value => OnSearch(value))"
                                      Placeholder="Buscar por N° de documento" Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                        </MudTextField>
                    </MudItem>
                </ToolBarContent>
                <HeaderContent>
                   
                    <MudTh>Nombre</MudTh>
                    <MudTh>Abreviatura</MudTh>
                    <MudTh>Número de Documento</MudTh>
                    <MudTh>Tipo de Documento</MudTh>
                    <MudTh>Acciones</MudTh>
                </HeaderContent>
                <RowTemplate>
                    
                    <MudTd DataLabel="Nombre">@context.Cli_NomApeRazSocial</MudTd>
                    <MudTd DataLabel="Abreviatura">@context.Cli_Abreviatura</MudTd>
                    <MudTd DataLabel="Número de Documento">@context.Cli_NumDocumento</MudTd>
                    <MudTd DataLabel="Tipo de Documento">@context.TipDoc_Nombre</MudTd>
                    <MudTd DataLabel="Acciones">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" @onclick="@(() => Btn_Actualizar_Cliente_Click(@context.Cli_Id))">
                            Actualizar
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" @onclick="@(() => Btn_Eliminar_Cliente_Click(@context.Cli_Id))">
                            Eliminar
                        </MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <div class="d-flex flex-column align-center">
                        <MudPagination Size="Size.Small" Rectangular="true" Variant="Variant.Text" BoundaryCount="1"
                                       MiddleCount="3" Count="@metaData.TotalPagina" SelectedChanged="PageChanged" Class="pa-4" />
                    </div>
                </PagerContent>
                <NoRecordsContent>
                    <MudText>No se encontraron registros.</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Un momento por favor...</MudText>
                </LoadingContent>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<DTO_Cliente_Obten_Paginado> clientes;
    private MetaData metaData = new MetaData();
    private int registroPagina = 10;
    private int numeroPagina = 1;
    private string searchTerm = string.Empty;
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        await LoadClients();
    }

    private async Task LoadClients()
    {
        try
        {
            cargando = true;
            var client = ClientFactory.CreateClient("ApiPRESUPUESTOS");

            // Agregar el token de autorización a la solicitud actual
            var token = await localStorage.GetItemAsync<string>("authToken");
            if (token != null)
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            var requestUri = $"api/v1/Cliente/Obten_Paginado/{registroPagina}/{numeroPagina}";

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                requestUri += $"?PorNDocumento={Uri.EscapeDataString(searchTerm)}";
            }

            var response = await client.GetAsync(requestUri);

            if (response.IsSuccessStatusCode)
            {
                var metadataHeader = response.Headers.GetValues("X-Pagination").FirstOrDefault();
                if (metadataHeader != null)
                {
                    metaData = JsonSerializer.Deserialize<MetaData>(metadataHeader);
                }

                var responseBody = await response.Content.ReadFromJsonAsync<DTO_ResponsePag<IEnumerable<DTO_Cliente_Obten_Paginado>>>();
                if (responseBody != null && responseBody.IsSuccessful)
                {
                    clientes = responseBody.Data;
                }
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private void PageChanged(int page)
    {
        numeroPagina = page;
        _ = LoadClients();
    }

    private void OnSearch(string searchTerm)
    {
        this.searchTerm = searchTerm;
        numeroPagina = 1; // Reset to first page when searching
        _ = LoadClients();
    }

    private void Btn_Nuevo_Cliente_Click()
    {
        NavigationManager.NavigateTo("/cliente_crea");
    }

    private void Btn_Actualizar_Cliente_Click(string Cli_Id)
    {
        NavigationManager.NavigateTo($"/cliente_actualiza/{Cli_Id}");
    }

    private void Btn_Eliminar_Cliente_Click(string Cli_Id)
    {
        NavigationManager.NavigateTo($"/cliente_actualiza_condicion/{Cli_Id}");
    }
}
